import * as fs from 'fs';
import * as path from 'path';
import * as crypto from 'crypto';
import { MOVIES_VECTOR_SEARCH_DEFAULT_YEAR } from './movies.constants';

const EXAMPLE_VECTOR_FILE_NAME = 'przykladowy_wektor.txt';
const EXAMPLE_DEFAULT_PLOT = 'default_plot';

/**
 * Helper function to return default embedding vector for searching movies database
 * for sake of demonstration purposes
 * @returns {number[]} - default embedding vector
 */
export const getDefaultEmbeddingVector = (): number[] => {
  const rootDir = process.cwd();
  const fileContent = fs.readFileSync(
    path.join(rootDir, 'data', EXAMPLE_VECTOR_FILE_NAME),
    'utf8',
  );

  const vectorString = fileContent.trim().slice(1, -1);
  return vectorString.split(',').map(Number);
};

/**
 * Generates a cache key for the given plot and year.
 * The cache key is generated by hashing the plot string and appending the year.
 * If no plot is provided the default example plot string is used for the caching purposes.
 * If no year is provided the default year is used.
 * @param plot - The plot string for the search query.
 * @param year - The year for filtering movies.
 * @returns {string} - The generated cache key.
 */
export const getCacheKey = (plot?: string, year?: number): string => {
  const sanitizedPlot = plot
    ? plot.replace(/[^a-zA-Z0-9]/g, '_').toLowerCase()
    : EXAMPLE_DEFAULT_PLOT;
  const yearString =
    year !== undefined && year !== null
      ? year.toString()
      : MOVIES_VECTOR_SEARCH_DEFAULT_YEAR;
  const hash = crypto.createHash('sha256').update(sanitizedPlot).digest('hex');
  return `movies_${hash}_${yearString}`;
};
